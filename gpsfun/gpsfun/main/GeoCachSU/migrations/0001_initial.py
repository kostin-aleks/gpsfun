# Generated by Django 3.1.2 on 2020-11-02 05:29

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Cach',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pid', models.IntegerField(default=0)),
                ('code', models.CharField(max_length=32)),
                ('type_code', models.CharField(max_length=2)),
                ('name', models.CharField(blank=True, max_length=128, null=True)),
                ('created_date', models.DateTimeField(blank=True, null=True)),
                ('changed_date', models.DateTimeField(blank=True, null=True)),
                ('created_by', models.IntegerField(db_column='created_by_pid', default=0)),
                ('coauthors', models.CharField(blank=True, max_length=256, null=True)),
                ('cach_type', models.CharField(blank=True, max_length=128, null=True)),
                ('cach_class', models.CharField(blank=True, max_length=256, null=True)),
                ('cach_attr', models.CharField(blank=True, max_length=512, null=True)),
                ('country', models.CharField(blank=True, max_length=128, null=True)),
                ('town', models.CharField(blank=True, max_length=64, null=True)),
                ('oblast', models.CharField(blank=True, max_length=64, null=True)),
                ('loc_NS', models.CharField(blank=True, max_length=1, null=True)),
                ('loc_EW', models.CharField(blank=True, max_length=1, null=True)),
                ('loc_NS_degree', models.IntegerField(blank=True, null=True)),
                ('loc_EW_degree', models.IntegerField(blank=True, null=True)),
                ('loc_NS_minute', models.FloatField(blank=True, null=True)),
                ('loc_EW_minute', models.FloatField(blank=True, null=True)),
                ('dostupnost', models.IntegerField(blank=True, null=True)),
                ('mestnost', models.IntegerField(null=True)),
                ('grade', models.FloatField(blank=True, null=True)),
                ('country_code', models.CharField(blank=True, max_length=2, null=True)),
                ('admin_code', models.CharField(blank=True, max_length=6, null=True)),
                ('code_fips10_4', models.CharField(blank=True, max_length=6, null=True)),
                ('code_iso3166_2', models.CharField(blank=True, max_length=6, null=True)),
                ('country_name', models.CharField(blank=True, max_length=64, null=True)),
                ('oblast_name', models.CharField(blank=True, max_length=128, null=True)),
            ],
            options={
                'db_table': 'cach',
            },
        ),
        migrations.CreateModel(
            name='Geocacher',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uid', models.IntegerField(null=True, unique=True)),
                ('nickname', models.CharField(max_length=64)),
                ('name', models.CharField(blank=True, max_length=128, null=True)),
                ('birstday', models.DateTimeField(blank=True, null=True)),
                ('sex', models.CharField(blank=True, max_length=1, null=True)),
                ('email', models.CharField(blank=True, max_length=64, null=True, unique=True)),
                ('country', models.CharField(blank=True, max_length=128, null=True)),
                ('town', models.CharField(blank=True, max_length=64, null=True)),
                ('oblast', models.CharField(blank=True, max_length=64, null=True)),
                ('phone', models.CharField(blank=True, max_length=64, null=True)),
                ('icq', models.CharField(blank=True, max_length=18, null=True)),
                ('web', models.CharField(blank=True, max_length=128, null=True)),
                ('gps', models.CharField(blank=True, max_length=256, null=True)),
                ('created_caches', models.IntegerField(default=0, null=True)),
                ('found_caches', models.IntegerField(default=0, null=True)),
                ('photo_albums', models.IntegerField(default=0, null=True)),
                ('register_date', models.DateTimeField(blank=True, null=True)),
                ('last_login', models.DateTimeField(blank=True, null=True)),
                ('forum_posts', models.IntegerField(default=0, null=True)),
                ('country_iso3', models.CharField(blank=True, max_length=3, null=True)),
                ('admin_code', models.CharField(blank=True, max_length=6, null=True)),
            ],
            options={
                'db_table': 'geocacher',
            },
        ),
        migrations.CreateModel(
            name='LogCreateCach',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('author_uid', models.IntegerField(default=0)),
                ('cach_pid', models.IntegerField(default=0)),
                ('created_date', models.DateTimeField(blank=True, null=True)),
                ('coauthor', models.BooleanField(default=False)),
                ('updated', models.BooleanField()),
            ],
            options={
                'db_table': 'log_create_cach',
            },
        ),
        migrations.CreateModel(
            name='LogPhotoAlbum',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cacher_uid', models.IntegerField(default=0)),
                ('cach_pid', models.IntegerField(default=0)),
                ('updated', models.BooleanField()),
            ],
            options={
                'db_table': 'log_photoalbum',
            },
        ),
        migrations.CreateModel(
            name='LogRecommendCach',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cacher_uid', models.IntegerField(default=0)),
                ('cach_pid', models.IntegerField(default=0)),
                ('updated', models.BooleanField()),
            ],
            options={
                'db_table': 'log_recommend_cach',
            },
        ),
        migrations.CreateModel(
            name='LogSeekCach',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cacher_uid', models.IntegerField(default=0)),
                ('cach_pid', models.IntegerField(default=0)),
                ('found_date', models.DateTimeField(blank=True, null=True)),
                ('grade', models.IntegerField(blank=True, null=True)),
                ('updated', models.BooleanField()),
            ],
            options={
                'db_table': 'log_seek_cach',
            },
        ),
        migrations.CreateModel(
            name='GeocacherStat',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uid', models.IntegerField(blank=True, null=True)),
                ('found_count', models.IntegerField(blank=True, null=True)),
                ('created_count', models.IntegerField(blank=True, null=True)),
                ('curr_found_count', models.IntegerField(blank=True, null=True)),
                ('curr_created_count', models.IntegerField(blank=True, null=True)),
                ('last_found_count', models.IntegerField(blank=True, null=True)),
                ('last_created_count', models.IntegerField(blank=True, null=True)),
                ('av_grade', models.FloatField(blank=True, null=True)),
                ('av_his_cach_grade', models.FloatField(blank=True, null=True)),
                ('country', models.CharField(blank=True, max_length=64, null=True)),
                ('region', models.CharField(blank=True, max_length=128, null=True)),
                ('vi_found_count', models.IntegerField(blank=True, null=True)),
                ('vi_created_count', models.IntegerField(blank=True, null=True)),
                ('vi_curr_found_count', models.IntegerField(blank=True, null=True)),
                ('vi_curr_created_count', models.IntegerField(blank=True, null=True)),
                ('vi_last_found_count', models.IntegerField(blank=True, null=True)),
                ('vi_last_created_count', models.IntegerField(blank=True, null=True)),
                ('tr_found_count', models.IntegerField(blank=True, null=True)),
                ('tr_created_count', models.IntegerField(blank=True, null=True)),
                ('tr_curr_found_count', models.IntegerField(blank=True, null=True)),
                ('tr_curr_created_count', models.IntegerField(blank=True, null=True)),
                ('tr_last_found_count', models.IntegerField(blank=True, null=True)),
                ('tr_last_created_count', models.IntegerField(blank=True, null=True)),
                ('geocacher', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='GeoCachSU.geocacher', verbose_name='Geocacher')),
            ],
            options={
                'db_table': 'geocacher_stat',
            },
        ),
        migrations.CreateModel(
            name='GeocacherSearchStat',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('geocacher_uid', models.IntegerField(default=0)),
                ('points', models.IntegerField(blank=True, default=0, null=True)),
                ('year_points', models.IntegerField(blank=True, default=0, null=True)),
                ('country', models.CharField(blank=True, max_length=64, null=True)),
                ('region', models.CharField(blank=True, max_length=128, null=True)),
                ('geocacher', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='GeoCachSU.geocacher', verbose_name='Geocacher')),
            ],
            options={
                'db_table': 'geocacher_search_stat',
            },
        ),
        migrations.CreateModel(
            name='CachStat',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cach_pid', models.IntegerField(default=0, verbose_name='pid')),
                ('recommend_count', models.IntegerField(blank=True, null=True, verbose_name='recommendations')),
                ('found_count', models.IntegerField(blank=True, null=True, verbose_name='found')),
                ('rank', models.FloatField(blank=True, null=True, verbose_name='rank')),
                ('points', models.FloatField(blank=True, null=True, verbose_name='points')),
                ('cach', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='GeoCachSU.cach', verbose_name='cache')),
                ('geocacher', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='GeoCachSU.geocacher', verbose_name='geocacher')),
            ],
            options={
                'db_table': 'cach_stat',
            },
        ),
        migrations.CreateModel(
            name='CacheLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cache_pid', models.IntegerField(default=0)),
                ('logged_by_uid', models.IntegerField(blank=True, null=True)),
                ('logged_by_nick', models.CharField(blank=True, max_length=64, null=True)),
                ('log_type', models.CharField(blank=True, max_length=16, null=True)),
                ('log_date', models.DateTimeField(blank=True, null=True)),
                ('txt', models.TextField(blank=True, null=True)),
                ('cache', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='GeoCachSU.cach')),
            ],
            options={
                'db_table': 'cache_log',
            },
        ),
        migrations.CreateModel(
            name='CacheDescription',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cache_pid', models.IntegerField(default=0)),
                ('terrain_description', models.TextField(blank=True, null=True)),
                ('cache_description', models.TextField(blank=True, null=True)),
                ('virtual_part', models.TextField(blank=True, null=True)),
                ('cache_content', models.TextField(blank=True, null=True)),
                ('cache', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='GeoCachSU.cach')),
            ],
            options={
                'db_table': 'cache_description',
            },
        ),
    ]
